Automatically generated by Mendeley Desktop 1.18
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{ResearchSkillsInComputerScience,
abstract = {This paper provides a basic introduction to the research skills that are necessary to complete an advanced masters or PhD in Computing Science. It starts by identifying criteria for good research practice. It then goes on to propose guidelines for the written presentation. Finally, we provide criteria for oral presentation.},
author = {Johnson, Chris},
file = {:C$\backslash$:/Users/swenm{\_}000/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Johnson - 2007 - Basic Research Skills in Computing Science.pdf:pdf},
title = {{Basic Research Skills in Computing Science}},
url = {http://cs.ndsu.edu/research/strg/docs/Johnson-BasicResearchSkills.pdf},
year = {2007}
}
@misc{BlogTechStack,
title = {{What Is a Technology Stack and Why Do I Need One}},
url = {https://blog.hubstaff.com/technology-stack/},
urldate = {2018-05-24},
year = {2017}
}
@misc{UnityAssetStoreVisualScripting,
title = {{tools-visual-scripting - Asset Store}},
url = {https://assetstore.unity.com/categories/tools/visual-scripting},
urldate = {2018-05-15}
}
@misc{StackShareCategories,
title = {{Open Source {\&} SaaS Tools | StackShare}},
url = {https://stackshare.io/categories},
urldate = {2018-05-24}
}
@misc{JsonSchemaOrg,
title = {{JSON Schema | The home of JSON Schema}},
url = {http://json-schema.org/},
urldate = {2018-05-16}
}
@article{VisualScripting,
abstract = {Object-oriented programming techniques are known to improve the flexibility and reusability of certain kinds of software. Libraries of object classes, however, continue to be difficult both to develop and to reuse. We present an approach to object-oriented application development in which applications are constructed by interactively “scripting” cooperating, reusable software objects. A visual scripting tool is being developed within ITHACA2, an Esprit II project which seeks to produce an integrated environment for the rapid and flexible development of object-oriented applications for selected application domains.},
author = {Nierstrasz, Oscar and Dami, Laurent and de Mey, Vicki and Stadelmann, Marc and Tsichritzis, Dennis and Vitek, Jan},
title = {{Visual Scripting - Towards Interactive Construction of Object-Oriented Applications}},
url = {https://www.researchgate.net/profile/Jan{\_}Vitek/publication/2665228{\_}Visual{\_}Scripting{\_}-{\_}Towards{\_}Interactive{\_}Construction{\_}of{\_}Object-Oriented{\_}Applications/links/02bfe51226c4933f53000000.pdf},
year = {1991}
}
@misc{StackOverflowNW,
title = {{Newest 'nwjs' Questions - Stack Overflow}},
url = {https://stackoverflow.com/questions/tagged/nwjs},
urldate = {2018-05-11}
}
@misc{QtWebKit,
title = {{Qt WebKit - Qt Wiki}},
url = {https://wiki.qt.io/Qt{\_}WebKit},
urldate = {2018-05-11}
}
@misc{QtLicense,
title = {{Download Qt: Choose commercial or open source}},
url = {https://www.qt.io/download},
urldate = {2018-05-16}
}
@misc{WhatIsApacheFlexJS,
title = {{FlexJS (legacy) - Apache Flex - Apache Software Foundation}},
url = {https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=34013930},
urldate = {2018-05-26}
}
@misc{AdobeFlashFuture,
author = {Adobe},
title = {{Flash {\&} The Future of Interactive Content | Adobe Blog}},
url = {https://theblog.adobe.com/adobe-flash-update/},
urldate = {2018-05-24},
year = {2017}
}
@techreport{Psaila2008,
abstract = {Standardized main memory representation methods
(DOM) are quite inadequate to represent large XML Documents,
both in terms of space (necessary amount of memory) and,
consequently, in time: it easily happens that it is not possible
to load large XML documents in main memory.
In this paper, we present Virtual DOM, a Java package that
provides an efficient representation technique for large XML
documents. It adopts a specifically designed virtual memory
technique: memory blocks allocated to represent the document
are swapped, when necessary, by skipping the operating system
swapping mechanism; this way, the actual main memory needs
are kept under control, the thrashing phenomenon is avoided
even for large documents.},
address = {Italy},
author = {Psaila, Giuseppe},
doi = {10.1109},
institution = {Universita degli Studi di Bergamo},
title = {{Virtual DOM: an Efficient Virtual Memory Representation for Large XML Documents}},
url = {https://ieeexplore.ieee.org/document/4624721/},
year = {2008}
}
@misc{QtLanguageBindings,
title = {{Language Bindings - Qt Wiki}},
url = {http://wiki.qt.io/Language{\_}Bindings},
urldate = {2018-05-16}
}
@misc{HaxeGithubTrending,
title = {{Trending Haxe repositories on GitHub this month}},
url = {https://github.com/trending/haxe?since=monthly},
urldate = {2018-05-08}
}
@misc{HaxeUsingExternalJavaScriptLibraries,
title = {{Haxe - The Cross-platform Toolkit}},
url = {https://haxe.org/manual/target-javascript-external-libraries.html},
urldate = {2018-05-05}
}
@misc{BlizzardQt,
title = {{Blizzard/qt: Blizzard's additions/modifications to Qt5}},
url = {https://github.com/Blizzard/qt},
urldate = {2018-05-11}
}
@misc{WtQt,
title = {{Wt, C++ Web Toolkit — Emweb}},
url = {https://www.webtoolkit.eu/wt},
urldate = {2018-05-11}
}
@misc{AMDQt,
title = {{Qt enhances user experience on AMD's Radeon Software Crimson Edition graphic software - Qt}},
url = {https://www1.qt.io/qt-news/qt-enhances-user-experience-amds-radeon-software-crimson-edition-graphic-software/},
urldate = {2018-05-11}
}
@misc{HaxeSummitSince2014,
title = {{World Wide Haxe 2014 - Haxe - The Cross-platform Toolkit}},
url = {https://haxe.org/videos/conferences/wwx-2014/},
urldate = {2018-05-08}
}
@misc{ValveQt,
title = {{Qt - Valve Developer Community}},
url = {https://developer.valvesoftware.com/wiki/Qt},
urldate = {2018-05-16}
}
@misc{QtForum,
title = {{Home | Qt Forum}},
url = {https://forum.qt.io/},
urldate = {2018-05-16}
}
@inproceedings{Nurseitov,
abstract = {This paper compares two data interchange formats currently used by industry applications; XML and JSON. The choice of an adequate data interchange format can have significant consequences on data transmission rates and performance. We describe the language specifications and their respective setting of use. A case study is then conducted to compare the resource utilization and the relative performance of applications that use the interchange formats. We find that JSON is significantly faster than XML and we further record other resource-related metrics in our results.},
author = {Nurseitov, Nurzhan and Paulson, Michael and Reynolds, Randall and Izurieta, Clemente},
booktitle = {CAINE},
file = {:C$\backslash$:/Users/swenm{\_}000/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nurseitov et al. - Unknown - Comparison of JSON and XML Data Interchange Formats A Case Study.pdf:pdf},
title = {{Comparison of JSON and XML Data Interchange Formats: A Case Study}},
url = {https://pdfs.semanticscholar.org/8432/1e662b24363e032d680901627aa1bfd6088f.pdf},
year = {2009}
}
@misc{NWGitHub,
title = {{nwjs/nw.js: Call all Node.js modules directly from DOM/WebWorker and enable a new way of writing applications with all Web technologies.}},
url = {https://github.com/nwjs/nw.js},
urldate = {2018-05-11}
}
@misc{CompilerTargetsHaxe,
title = {{Compiler Targets - Haxe - The Cross-platform Toolkit}},
url = {https://haxe.org/documentation/introduction/compiler-targets.html},
urldate = {2018-04-06}
}
@misc{QtCutelyst,
title = {{Cutelyst}},
url = {https://cutelyst.org/},
urldate = {2018-05-11}
}
@misc{DraftJSONSchema07,
abstract = {JSON Schema defines the media type "application/schema+json", a JSON-based format for describing the structure of JSON data. JSON Schema asserts what a JSON document must look like, ways to extract information from it, and how to interact with it. The "application/schema-instance+json" media type provides additional feature-rich integration with "application/schema+json" beyond what can be offered for "application/json" documents.},
author = {Wright, A and Andrews, H},
title = {{JSON Schema: A Media Type for Describing JSON Documents}},
url = {http://json-schema.org/latest/json-schema-core.html},
urldate = {2018-05-26},
year = {2018}
}
@article{Severance2012,
abstract = {JavaScript Object Notation (JSON) is a popular format for data serialization. Programmers use it extensively to encode data for transfer between a server and an Ajax application, to connect two servers communicating via Web services, and in many other similar scenarios. Yahoo's Douglas Crockford is JSON's self-appointed evangelist. He's also involved in the JavaScript community, author of JavaScript: The Good Parts (Yahoo Press, 2008), and developer of JSLint, a tool that aims to improve the quality of JavaScript applications. Crockford is careful to point out that he didn't invent JSON—rather, he simply discovered it, and told us all about his discovery when I recently spoke with him about JSON, XML, and the future. You can watch the video interview associated with this article at www.computer.org/ computingconversations.},
address = {Michigan},
author = {Severance, Charles},
journal = {IEEE Computer Society},
title = {{Discovering JavaScript Object Notation}},
url = {http://ieeexplore.ieee.org/document/6178118/},
year = {2012}
}
@misc{StackOverflowQtQuestions,
title = {{Newest 'qt' Questions - Stack Overflow}},
url = {https://stackoverflow.com/questions/tagged/qt},
urldate = {2018-05-16}
}
@misc{AtomShellIsNowElectron,
author = {{Sawicki Kevin}},
title = {{Atom Shell is now Electron | Electron Blog}},
url = {https://electronjs.org/blog/electron},
urldate = {2018-05-08}
}
@misc{ElectronApps,
title = {{Electron Apps | Electron}},
url = {https://electronjs.org/apps},
urldate = {2018-05-11}
}
@misc{StartOfAtomShell,
title = {{Release v0.1.0: Update node: use node's implementation of setImmediate. {\textperiodcentered} electron/electron}},
url = {https://github.com/electron/electron/releases/tag/v0.1.0},
urldate = {2018-05-08}
}
@misc{NWJSApps,
title = {{List of apps and companies using nw.js {\textperiodcentered} nwjs/nw.js Wiki}},
url = {https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js},
urldate = {2018-05-11}
}
@misc{NoFlo,
title = {{NoFlo | Flow-Based Programming for JavaScript}},
url = {https://noflojs.org/},
urldate = {2018-05-15}
}
@misc{StackOverflowFlexQuestions,
title = {{Newest 'flex' Questions - Stack Overflow}},
url = {https://stackoverflow.com/questions/tagged/flex},
urldate = {2018-05-24}
}
@misc{HaxeSummit,
title = {{Haxe Summit 2018 in Seattle}},
url = {https://summit.haxe.org/us/2018/},
urldate = {2018-05-06}
}
@misc{ApacheFlexJSDownload,
title = {{Apache Flex{\textregistered} - Download Apache FlexJS}},
url = {http://flex.apache.org/download-flexjs.html},
urldate = {2018-05-16}
}
@misc{ElectronJS,
title = {{Electron | Bouw cross-platform desktop apps met JavaScript, HTML, en CSS.}},
url = {https://electronjs.org/},
urldate = {2018-05-11}
}
@misc{ApacheFlex,
title = {{Apache Flex{\textregistered}}},
url = {http://flex.apache.org/},
urldate = {2018-05-24}
}
@book{Aho1983,
abstract = {This book presents the data structures and algorithms that underpin much of today's computer programming. The basis of this book is the material contained in the first six chapters of our earlier work, The Design and Analysis of Computer Algorithms. We have expanded that coverage and have added material on algorithms for external storage and memory management. As a consequence, this book should be suitable as a text for a first course on data structures and algorithms. The only prerequisite we assume is familiarity with some high-level programming language such as Pascal. We have attempted to cover data structures and algorithms in the broader context of solving problems using computers. We use abstract data types informally in the description and implementation of algorithms. Although abstract data types are only starting to appear in widely available programming languages, we feel they are a useful tool in designing programs, no matter what the language. We also introduce the ideas of step counting and time complexity as an integral part of the problem solving process. This decision reflects our longheld belief that programmers are going to continue to tackle problems of progressively larger size as machines get faster, and that consequently the time complexity of algorithms will become of even greater importance, rather than of less importance, as new generations of hardware become available.},
address = {Boston, MA, USA},
author = {Aho, Alfred V and {John Hopcroft}, Jersey E and Ullman, Jeffrey D},
edition = {1st},
file = {:C$\backslash$:/Users/swenm{\_}000/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Aho, John Hopcroft, Ullman - 1983 - Data Structures and Algorithms Chapter 11 Data Structures and Algorithms for External Storage.pdf:pdf},
isbn = {0201000237},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
title = {{Data Structures and Algorithms}},
url = {http://lib.sgu.edu.vn:84/dspace/bitstream/TTHLDHSG/2940/1/Data Structures and Algorithms.pdf},
year = {1983}
}
@techreport{Ray2014,
abstract = {What is the effect of programming languages on software qual-ity? This question has been a topic of much debate for a very long time. In this study, we gather a very large data set from GitHub (729 projects, 80 Million SLOC, 29,000 authors, 1.5 million com-mits, in 17 languages) in an attempt to shed some empirical light on this question. This reasonably large sample size allows us to use a mixed-methods approach, combining multiple regression model-ing with visualization and text analytics, to study the effect of lan-guage features such as static v.s. dynamic typing, strong v.s. weak typing on software quality. By triangulating findings from differ-ent methods, and controlling for confounding effects such as team size, project size, and project history, we report that language de-sign does have a significant, but modest effect on software quality. Most notably, it does appear that strong typing is modestly better than weak typing, and among functional languages, static typing is also somewhat better than dynamic typing. We also find that func-tional languages are somewhat better than procedural languages. It is worth noting that these modest effects arising from language de-sign are overwhelmingly dominated by the process factors such as project size, team size, and commit size. However, we hasten to caution the reader that even these modest effects might quite possi-bly be due to other, intangible process factors, e.g., the preference of certain personality types for functional, static and strongly typed languages.},
address = {Davis},
author = {Ray, Baishakhi and Posnett, Daryl and Filkov, Vladimir and Devanbu, Premkumar},
file = {:C$\backslash$:/Users/swenm{\_}000/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ray et al. - 2014 - A Large Scale Study of Programming Languages and Code Quality in Github.pdf:pdf},
institution = {University of California},
title = {{A Large Scale Study of Programming Languages and Code Quality in Github}},
url = {https://cs.uwaterloo.ca/{~}m2nagapp/courses/CS846/1171/papers/ray{\_}fse14.pdf},
year = {2014}
}
@misc{HaxeCommunitySupport,
title = {{Haxe - The Cross-platform Toolkit}},
url = {https://haxe.org/community/community-support.html},
urldate = {2018-05-05}
}
@misc{VideoLanQt,
title = {{Qt Interface - VideoLAN Wiki}},
url = {https://wiki.videolan.org/Qt{\_}Interface/},
urldate = {2018-05-11}
}
@misc{GitHub3dVisualScripting,
abstract = {This article was written for readers without any previous knowledge. It's objective is to introduce you to some important concepts of scripting languages and visual scripting. This lays the foundation for the understanding of Inexor's visual scripting engine.},
title = {{3D Visual Scripting {\textperiodcentered} inexorgame/inexor-core Wiki}},
url = {https://github.com/inexorgame/inexor-core/wiki/3D-Visual-Scripting},
urldate = {2018-05-15}
}
@misc{FlashWillBeBlocked,
title = {{All the Major Browsers Will Soon Block Flash, is Your Website Ready?}},
url = {https://petapixel.com/2016/08/17/major-browsers-will-soon-block-flash-website-ready/},
urldate = {2018-05-24},
year = {2016}
}
@misc{QtDiagramExample,
title = {{Diagram Scene Example | Qt Widgets 5.11}},
url = {http://doc.qt.io/qt-5/qtwidgets-graphicsview-diagramscene-example.html},
urldate = {2018-05-16}
}
@misc{GithubAbout,
title = {{About Github}},
url = {https://github.com/about},
urldate = {2018-05-08}
}
@misc{Qt,
title = {{Qt | Cross-platform software development for embedded {\&} desktop}},
url = {https://www.qt.io/},
urldate = {2018-05-16}
}
@misc{GithubElectron,
title = {{electron/electron: Build cross platform desktop apps with JavaScript, HTML, and CSS}},
url = {https://github.com/electron/electron},
urldate = {2018-05-11}
}
@misc{StackOverflowSurvey2018,
author = {{Stack Overflow}},
title = {{Stack Overflow Developer Survey 2018}},
url = {https://insights.stackoverflow.com/survey/2018/{\#}technology},
urldate = {2018-05-24},
year = {2018}
}
@misc{WhatIsApacheFlex,
author = {Curcuru, Shane},
title = {{What is Apache Flex? Website Branding Review — Community Over Code}},
url = {https://communityovercode.com/2016/02/what-is-apache-flex-website-branding-review/},
urldate = {2018-05-24},
year = {2016}
}
@misc{FromNWToElectronZhaoCheng,
author = {{Zhao Cheng}},
title = {{From node-webkit to Electron 1.0}},
url = {http://cheng.guru/blog/2016/05/13/from-node-webkit-to-electron-1-0.html},
urldate = {2018-05-16}
}
@article{FoundationsJSONSchema,
abstract = {JSON – the most popular data format for sending API re-quests and responses – is still lacking a standardized schema or meta-data definition that allows the developers to spec-ify the structure of JSON documents. JSON Schema is an attempt to provide a general purpose schema language for JSON, but it is still work in progress, and the formal spec-ification has not yet been agreed upon. Why this could be a problem becomes evident when examining the behaviour of numerous tools for validating JSON documents against this initial schema proposal: although they agree on most general cases, when presented with the greyer areas of the specification they tend to di↵er significantly. In this paper we provide the first formal definition of syntax and seman-tics for JSON Schema and use it to show that implementing this layer on top of JSON is feasible in practice. This is done both by analysing the theoretical aspects of the validation problem and by showing how to set up and validate a JSON Schema for Wikidata, the central storage for Wikimedia.},
author = {Pezoa, Felipe and Reutter, Juan L and Suarez, Fernando and Ugarte, Mart{\'{i}}n and Vrgo{\v{c}}, Domagoj},
doi = {10.1145/2872427.2883029},
file = {:C$\backslash$:/Users/swenm{\_}000/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pezoa et al. - 2016 - Foundations of JSON Schema.pdf:pdf},
title = {{Foundations of JSON Schema}},
url = {https://martinugarte.com/media/pdfs/p263.pdf},
year = {2016}
}
@article{SPA,
abstract = {Single Page Application (SPA) is composed of individual component that can be replaced or updated independently, without refreshing whole page so that the entire page does not need to be reloaded on each user action, which saves bandwidth as well as no loading of external files every time when page is loaded, such as images or CSS files, etc. The purpose behind this is to make the subsequent page loads very fast as compared to traditional Request-Response cycle. SPA's written by using JavaScript, HTML5, AJAX are getting the likes of developers to build their web applications and some frameworks like AngularJS which are built on top of the JavaScript are making the life of developers very easy. The idea behind using AngularJS in web application is to make your web application modular and easy to maintain. AngularJS brings MVC (Model View Controller) capability to your application. After using minified and compressed files in your application, the size reduces to some KBs which will results in faster loading of pages.},
author = {Jadhav, Madhuri A and Sawant, Balkrishna R and Deshmukh, Anushree and Mumbai, Navi},
file = {:C$\backslash$:/Users/swenm{\_}000/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jadhav et al. - 2015 - Single Page Application using AngularJS.pdf:pdf},
journal = {International Journal of Computer Science and Information Technologies},
title = {{Single Page Application using AngularJS}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.736.4771{\&}rep=rep1{\&}type=pdf},
volume = {6},
year = {2015}
}
@misc{StackOverflowAnnualSurvey2018,
title = {{Stack Overflow Developer Survey 2018}},
url = {https://insights.stackoverflow.com/survey/2018},
urldate = {2018-05-12}
}
@book{Droettboom2016,
author = {Droettboom, Michael},
edition = {1.0},
file = {:C$\backslash$:/Users/swenm{\_}000/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Droettboom - 2016 - Understanding JSON Schema.pdf:pdf},
title = {{Understanding JSON Schema}},
url = {https://spacetelescope.github.io/understanding-json-schema/UnderstandingJSONSchema.pdf},
year = {2016}
}
